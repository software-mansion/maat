=== keep-starknet-strange/scaffold-garaga-4f21cdbe4 ===

>>> git clone --depth 1 --no-tags https://github.com/keep-starknet-strange/scaffold-garaga .
[err] Cloning into '.'...

>>> workdir=contracts maat-check-versions
[out] Name             Version            Source                        Installed
[out] nodejs           24.5.0             ASDF_NODEJS_VERSION           true
[out] scarb            2.12.0             ASDF_SCARB_VERSION            true
[out] starknet-foundry nightly-2025-08-04 ASDF_STARKNET-FOUNDRY_VERSION true

>>> workdir=contracts maat-patch
[err] Installed 1 package in 2ms
[out] diff --git a/Scarb.toml b/Scarb.toml
[out] index 87157fe..4ce15b2 100644
[out] --- a/Scarb.toml
[out] +++ b/Scarb.toml
[out] @@ -1,2 +1,13 @@
[out]  [workspace]
[out]  members = ["verifier"]
[out] +
[out] +[patch.scarbs-xyz]
[out] +assert_macros = "2.12.0" # NOTE: added by maat-patch, was: None
[out] +starknet = "2.12.0" # NOTE: added by maat-patch, was: None
[out] +cairo_test = "2.12.0" # NOTE: added by maat-patch, was: None
[out] +snforge_std = {version = "0.47.0+nightly-2025-08-04", registry = "https://scarbs.dev/"} # NOTE: added by maat-patch, was: None
[out] +snforge_scarb_plugin = {version = "0.47.0+nightly-2025-08-04", registry = "https://scarbs.dev/"} # NOTE: added by maat-patch, was: None
[out] +
[out] +[patch."https://github.com/foundry-rs/starknet-foundry.git"]
[out] +snforge_std = {version = "0.47.0+nightly-2025-08-04", registry = "https://scarbs.dev/"} # NOTE: added by maat-patch, was: None
[out] +snforge_scarb_plugin = {version = "0.47.0+nightly-2025-08-04", registry = "https://scarbs.dev/"} # NOTE: added by maat-patch, was: None
[out] diff --git a/verifier/Scarb.toml b/verifier/Scarb.toml
[out] index 2005a72..401a897 100644
[out] --- a/verifier/Scarb.toml
[out] +++ b/verifier/Scarb.toml
[out] @@ -2,6 +2,7 @@
[out]  name = "verifier"
[out]  version = "0.1.0"
[out]  edition = "2024_07"
[out] +cairo-version = "2.12.0" # NOTE: added by maat-patch, was: None
[out]  
[out]  [dependencies]
[out]  garaga = { git = "https://github.com/keep-starknet-strange/garaga.git", tag = "v0.18.0" }
[out] @@ -17,3 +18,9 @@ cairo_test = "2.11.4"
[out]  [[target.starknet-contract]]
[out]  casm = true
[out]  casm-add-pythonic-hints = true
[out] +
[out] +[scripts]
[out] +test = "scarb cairo-test" # NOTE: added by maat-patch, was: None
[out] +
[out] +[tool.scarb]
[out] +allow-prebuilt-plugins = ["snforge_std"] # NOTE: maat-patch added 'snforge_std'

>>> workdir=contracts scarb fetch
[out] warn: in context of a workspace, only the `profile` set in the workspace manifest is applied,
[out] but the `verifier` package also defines `profile` in the manifest
[out] 
[out] warn: in context of a workspace, only the `profile` set in the workspace manifest is applied,
[out] but the `garaga` package also defines `profile` in the manifest
[out] 
[out] warn: patch `cairo_test` (`registry+https://scarbs.xyz/`) for source `https://scarbs.xyz/` has not been used
[out] warn: patch `starknet` (`registry+https://scarbs.xyz/`) for source `https://scarbs.xyz/` has not been used
[out] warn: patch `snforge_scarb_plugin` (`registry+https://scarbs.dev/`) for source `https://scarbs.xyz/` has not been used
[out] warn: patch `snforge_scarb_plugin` (`registry+https://scarbs.dev/`) for source `https://github.com/foundry-rs/starknet-foundry` has not been used
[out] warn: patch `assert_macros` (`registry+https://scarbs.xyz/`) for source `https://scarbs.xyz/` has not been used
[out] warn: patch `snforge_std` (`registry+https://scarbs.dev/`) for source `https://scarbs.xyz/` has not been used
[out] warn: patch `snforge_std` (`registry+https://scarbs.dev/`) for source `https://github.com/foundry-rs/starknet-foundry` has not been used

>>> workdir=contracts scarb tree -q --workspace
[out] verifier v0.1.0 (/mnt/maat-workbench/contracts/verifier/Scarb.toml)
[out] ├── garaga v0.18.0 (git+https://github.com/keep-starknet-strange/garaga.git?tag=v0.18.0#1582fded827165532bebccc8a4b312058e5b34ca)
[out] ├── starknet v2.12.0 (std)
[out] └── [dev-dependencies]
[out]     └── cairo_test v2.12.0 (std)

>>> workdir=contracts scarb build --workspace --test
[out] warn: in context of a workspace, only the `profile` set in the workspace manifest is applied,
[out] but the `verifier` package also defines `profile` in the manifest
[out] 
[out] warn: in context of a workspace, only the `profile` set in the workspace manifest is applied,
[out] but the `garaga` package also defines `profile` in the manifest
[out] 
[out] warn: patch `starknet` (`registry+https://scarbs.xyz/`) for source `https://scarbs.xyz/` has not been used
[out] warn: patch `assert_macros` (`registry+https://scarbs.xyz/`) for source `https://scarbs.xyz/` has not been used
[out] warn: patch `snforge_std` (`registry+https://scarbs.dev/`) for source `https://github.com/foundry-rs/starknet-foundry` has not been used
[out] warn: patch `snforge_scarb_plugin` (`registry+https://scarbs.dev/`) for source `https://scarbs.xyz/` has not been used
[out] warn: patch `snforge_std` (`registry+https://scarbs.dev/`) for source `https://scarbs.xyz/` has not been used
[out] warn: patch `snforge_scarb_plugin` (`registry+https://scarbs.dev/`) for source `https://github.com/foundry-rs/starknet-foundry` has not been used
[out] warn: patch `cairo_test` (`registry+https://scarbs.xyz/`) for source `https://scarbs.xyz/` has not been used
[out]    Compiling test(verifier_unittest) verifier v0.1.0 (/mnt/maat-workbench/contracts/verifier/Scarb.toml)
[out] warn: Unused import: `verifier::honk_verifier::UltraStarknetHonkVerifier::hades_permutation`
[out]  --> /mnt/maat-workbench/contracts/verifier/src/honk_verifier.cairo:17:25
[out]     use core::poseidon::hades_permutation;
[out]                         ^^^^^^^^^^^^^^^^^
[out] 
[out] warn: Unused import: `verifier::honk_verifier::UltraStarknetHonkVerifier::ec`
[out]  --> /mnt/maat-workbench/contracts/verifier/src/honk_verifier.cairo:18:27
[out]     use garaga::circuits::ec;
[out]                           ^^
[out] 
[out] warn: Unused import: `verifier::honk_verifier::UltraStarknetHonkVerifier::u288`
[out]  --> /mnt/maat-workbench/contracts/verifier/src/honk_verifier.cairo:22:90
[out]         get_eigenvalue, get_min_one_order, get_nG_glv_fake_glv, get_third_root_of_unity, u288, u384,
[out]                                                                                          ^^^^
[out] 
[out] warn: Unused import: `verifier::honk_verifier::UltraStarknetHonkVerifier::VK_HASH`
[out]  --> /mnt/maat-workbench/contracts/verifier/src/honk_verifier.cairo:32:9
[out]         VK_HASH, is_on_curve_bn254, precomputed_lines,
[out]         ^^^^^^^
[out] 
[out] warn[E0001]: Unused variable. Consider ignoring by prefixing with `_`.
[out]  --> /mnt/maat-workbench/contracts/verifier/src/honk_verifier.cairo:63:30
[out]             let (transcript, transcript_state, base_rlc) = HonkTranscriptTrait::from_proof::<
[out]                              ^^^^^^^^^^^^^^^^
[out] 
[out] warn: Unused import: `verifier::honk_verifier_circuits::IntoCircuitInputValue`
[out]  --> /mnt/maat-workbench/contracts/verifier/src/honk_verifier_circuits.cairo:5:51
[out] use garaga::core::circuit::{AddInputResultTrait2, IntoCircuitInputValue, u288IntoCircuitInputValue};
[out]                                                   ^^^^^^^^^^^^^^^^^^^^^
[out] 
[out]     Finished `dev` profile target(s) in 11 seconds

>>> workdir=contracts scarb lint --workspace --deny-warnings
[out] warn: in context of a workspace, only the `profile` set in the workspace manifest is applied,
[out] but the `verifier` package also defines `profile` in the manifest
[out] 
[out] warn: in context of a workspace, only the `profile` set in the workspace manifest is applied,
[out] but the `garaga` package also defines `profile` in the manifest
[out] 
[out] warn: patch `snforge_std` (`registry+https://scarbs.dev/`) for source `https://scarbs.xyz/` has not been used
[out] warn: patch `snforge_scarb_plugin` (`registry+https://scarbs.dev/`) for source `https://scarbs.xyz/` has not been used
[out] warn: patch `snforge_scarb_plugin` (`registry+https://scarbs.dev/`) for source `https://github.com/foundry-rs/starknet-foundry` has not been used
[out] warn: patch `snforge_std` (`registry+https://scarbs.dev/`) for source `https://github.com/foundry-rs/starknet-foundry` has not been used
[out] warn: patch `starknet` (`registry+https://scarbs.xyz/`) for source `https://scarbs.xyz/` has not been used
[out] warn: patch `cairo_test` (`registry+https://scarbs.xyz/`) for source `https://scarbs.xyz/` has not been used
[out] warn: patch `assert_macros` (`registry+https://scarbs.xyz/`) for source `https://scarbs.xyz/` has not been used
[out]      Linting verifier v0.1.0 (/mnt/maat-workbench/contracts/verifier/Scarb.toml)
[out] warn: Unused import: `verifier::honk_verifier::UltraStarknetHonkVerifier::hades_permutation`
[out]  --> /mnt/maat-workbench/contracts/verifier/src/honk_verifier.cairo:17:25
[out]     use core::poseidon::hades_permutation;
[out]                         ^^^^^^^^^^^^^^^^^
[out] 
[out] warn: Unused import: `verifier::honk_verifier::UltraStarknetHonkVerifier::ec`
[out]  --> /mnt/maat-workbench/contracts/verifier/src/honk_verifier.cairo:18:27
[out]     use garaga::circuits::ec;
[out]                           ^^
[out] 
[out] warn: Unused import: `verifier::honk_verifier::UltraStarknetHonkVerifier::u288`
[out]  --> /mnt/maat-workbench/contracts/verifier/src/honk_verifier.cairo:22:90
[out]         get_eigenvalue, get_min_one_order, get_nG_glv_fake_glv, get_third_root_of_unity, u288, u384,
[out]                                                                                          ^^^^
[out] 
[out] warn: Unused import: `verifier::honk_verifier::UltraStarknetHonkVerifier::VK_HASH`
[out]  --> /mnt/maat-workbench/contracts/verifier/src/honk_verifier.cairo:32:9
[out]         VK_HASH, is_on_curve_bn254, precomputed_lines,
[out]         ^^^^^^^
[out] 
[out] warn: Plugin diagnostic: unnecessary double parentheses found. Consider removing them.
[out]  --> /mnt/maat-workbench/contracts/verifier/src/honk_verifier.cairo:188:32
[out]                 _points.append((*gem_comm).into());
[out]                                ^^^^^^^^^^^
[out] 
[out] warn[E0001]: Unused variable. Consider ignoring by prefixing with `_`.
[out]  --> /mnt/maat-workbench/contracts/verifier/src/honk_verifier.cairo:63:30
[out]             let (transcript, transcript_state, base_rlc) = HonkTranscriptTrait::from_proof::<
[out]                              ^^^^^^^^^^^^^^^^
[out] 
[out] warn: Unused import: `verifier::honk_verifier_circuits::IntoCircuitInputValue`
[out]  --> /mnt/maat-workbench/contracts/verifier/src/honk_verifier_circuits.cairo:5:51
[out] use garaga::core::circuit::{AddInputResultTrait2, IntoCircuitInputValue, u288IntoCircuitInputValue};
[out]                                                   ^^^^^^^^^^^^^^^^^^^^^
[out] 
[out] error: lint checking `verifier` failed due to previous errors
[out] 
[out] Stack backtrace:
[out]    0: anyhow::error::<impl anyhow::Error>::msg
[out]    1: anyhow::__private::format_err.104347
[out]    2: scarb::ops::lint::lint
[out]    3: scarb::commands::lint::do_lint
[out]    4: scarb::commands::run
[out]    5: scarb::main
[out]    6: std::sys::backtrace::__rust_begin_short_backtrace
[out]    7: main
[out]    8: __libc_start_call_main
[out]    9: __libc_start_main_impl
[out]   10: _start
Process finished with exit code 1

>>> SNFORGE_FUZZER_SEED=1 SNFORGE_IGNORE_FORK_TESTS=1 workdir=contracts scarb test --workspace
[out] warn: in context of a workspace, only the `profile` set in the workspace manifest is applied,
[out] but the `verifier` package also defines `profile` in the manifest
[out] 
[out]      Running test verifier (scarb cairo-test)
[out] warn: in context of a workspace, only the `profile` set in the workspace manifest is applied,
[out] but the `verifier` package also defines `profile` in the manifest
[out] 
[out] warn: in context of a workspace, only the `profile` set in the workspace manifest is applied,
[out] but the `garaga` package also defines `profile` in the manifest
[out] 
[out] warn: patch `snforge_scarb_plugin` (`registry+https://scarbs.dev/`) for source `https://scarbs.xyz/` has not been used
[out] warn: patch `cairo_test` (`registry+https://scarbs.xyz/`) for source `https://scarbs.xyz/` has not been used
[out] warn: patch `snforge_std` (`registry+https://scarbs.dev/`) for source `https://scarbs.xyz/` has not been used
[out] warn: patch `snforge_scarb_plugin` (`registry+https://scarbs.dev/`) for source `https://github.com/foundry-rs/starknet-foundry` has not been used
[out] warn: patch `starknet` (`registry+https://scarbs.xyz/`) for source `https://scarbs.xyz/` has not been used
[out] warn: patch `assert_macros` (`registry+https://scarbs.xyz/`) for source `https://scarbs.xyz/` has not been used
[out] warn: patch `snforge_std` (`registry+https://scarbs.dev/`) for source `https://github.com/foundry-rs/starknet-foundry` has not been used
[out]    Compiling test(verifier_unittest) verifier v0.1.0 (/mnt/maat-workbench/contracts/verifier/Scarb.toml)
[out] warn: Unused import: `verifier::honk_verifier::UltraStarknetHonkVerifier::hades_permutation`
[out]  --> /mnt/maat-workbench/contracts/verifier/src/honk_verifier.cairo:17:25
[out]     use core::poseidon::hades_permutation;
[out]                         ^^^^^^^^^^^^^^^^^
[out] 
[out] warn: Unused import: `verifier::honk_verifier::UltraStarknetHonkVerifier::ec`
[out]  --> /mnt/maat-workbench/contracts/verifier/src/honk_verifier.cairo:18:27
[out]     use garaga::circuits::ec;
[out]                           ^^
[out] 
[out] warn: Unused import: `verifier::honk_verifier::UltraStarknetHonkVerifier::u288`
[out]  --> /mnt/maat-workbench/contracts/verifier/src/honk_verifier.cairo:22:90
[out]         get_eigenvalue, get_min_one_order, get_nG_glv_fake_glv, get_third_root_of_unity, u288, u384,
[out]                                                                                          ^^^^
[out] 
[out] warn: Unused import: `verifier::honk_verifier::UltraStarknetHonkVerifier::VK_HASH`
[out]  --> /mnt/maat-workbench/contracts/verifier/src/honk_verifier.cairo:32:9
[out]         VK_HASH, is_on_curve_bn254, precomputed_lines,
[out]         ^^^^^^^
[out] 
[out] warn[E0001]: Unused variable. Consider ignoring by prefixing with `_`.
[out]  --> /mnt/maat-workbench/contracts/verifier/src/honk_verifier.cairo:63:30
[out]             let (transcript, transcript_state, base_rlc) = HonkTranscriptTrait::from_proof::<
[out]                              ^^^^^^^^^^^^^^^^
[out] 
[out] warn: Unused import: `verifier::honk_verifier_circuits::IntoCircuitInputValue`
[out]  --> /mnt/maat-workbench/contracts/verifier/src/honk_verifier_circuits.cairo:5:51
[out] use garaga::core::circuit::{AddInputResultTrait2, IntoCircuitInputValue, u288IntoCircuitInputValue};
[out]                                                   ^^^^^^^^^^^^^^^^^^^^^
[out] 
[out]     Finished `dev` profile target(s) in 6 seconds
[out]      Testing verifier
[out] running 0 tests
[out] test result: ok. 0 passed; 0 failed; 0 ignored; 0 filtered out;

>>> workdir=contracts maat-test-ls
[err]    0.004846281s  WARN cairo_language_server::config: client does not support `workspace/configuration` requests, config will not be reloaded
[out] Opening file:///mnt/maat-workbench/contracts/verifier/src/lib.cairo
[out] 
[out] ==============================
[out] Analysis completed, server is idle.
[out] 
[out] ==============================
[out] # Analyzed Crates
[out] ---
[out] ```json
[out] {
[out]   "name": "core",
[out]   "source_paths": [
[out]     "/mnt/maat-cache/scarb/registry/std/v2.12.0/core/src/lib.cairo"
[out]   ],
[out]   "settings": {
[out]     "name": "core",
[out]     "edition": "2024_07",
[out]     "version": "2.12.0",
[out]     "cfg_set": [
[out]       [
[out]         "target",
[out]         "starknet-contract"
[out]       ],
[out]       [
[out]         "target",
[out]         "test"
[out]       ]
[out]     ],
[out]     "dependencies": {
[out]       "core": {
[out]         "discriminator": null
[out]       }
[out]     },
[out]     "experimental_features": {
[out]       "negative_impls": true,
[out]       "associated_item_constraints": true,
[out]       "coupons": true,
[out]       "user_defined_inline_macros": false
[out]     }
[out]   },
[out]   "linter_configuration": "Off",
[out]   "plugins": {
[out]     "builtin_plugins": [
[out]       "AssertMacros",
[out]       "Executable",
[out]       "CairoTest"
[out]     ]
[out]   }
[out] }
[out] 
[out] {
[out]   "name": "garaga",
[out]   "source_paths": [
[out]     "/mnt/maat-cache/scarb/registry/git/checkouts/garaga-e3j1ur9j61a58/1582fde/src/src/lib.cairo"
[out]   ],
[out]   "settings": {
[out]     "name": "garaga",
[out]     "edition": "2023_10",
[out]     "version": "0.18.0",
[out]     "cfg_set": [
[out]       [
[out]         "target",
[out]         "starknet-contract"
[out]       ],
[out]       [
[out]         "target",
[out]         "test"
[out]       ]
[out]     ],
[out]     "dependencies": {
[out]       "core": {
[out]         "discriminator": null
[out]       },
[out]       "garaga": {
[out]         "discriminator": "garaga 0.18.0 (git+https://github.com/keep-starknet-strange/garaga.git?tag=v0.18.0#1582fded827165532bebccc8a4b312058e5b34ca)"
[out]       }
[out]     },
[out]     "experimental_features": {
[out]       "negative_impls": false,
[out]       "associated_item_constraints": false,
[out]       "coupons": false,
[out]       "user_defined_inline_macros": false
[out]     }
[out]   },
[out]   "linter_configuration": "Off",
[out]   "plugins": {}
[out] }
[out] 
[out] {
[out]   "name": "verifier",
[out]   "source_paths": [
[out]     "/mnt/maat-workbench/contracts/verifier/src/lib.cairo"
[out]   ],
[out]   "settings": {
[out]     "name": "verifier",
[out]     "edition": "2024_07",
[out]     "version": "0.1.0",
[out]     "cfg_set": [
[out]       [
[out]         "target",
[out]         "starknet-contract"
[out]       ],
[out]       [
[out]         "target",
[out]         "test"
[out]       ],
[out]       "test"
[out]     ],
[out]     "dependencies": {
[out]       "core": {
[out]         "discriminator": null
[out]       },
[out]       "garaga": {
[out]         "discriminator": "garaga 0.18.0 (git+https://github.com/keep-starknet-strange/garaga.git?tag=v0.18.0#1582fded827165532bebccc8a4b312058e5b34ca)"
[out]       },
[out]       "verifier": {
[out]         "discriminator": "verifier 0.1.0 (path+file:///mnt/maat-workbench/contracts/verifier/Scarb.toml)"
[out]       }
[out]     },
[out]     "experimental_features": {
[out]       "negative_impls": false,
[out]       "associated_item_constraints": false,
[out]       "coupons": false,
[out]       "user_defined_inline_macros": false
[out]     }
[out]   },
[out]   "linter_configuration": {
[out]     "include_compiler_generated_files": false
[out]   },
[out]   "plugins": {
[out]     "builtin_plugins": [
[out]       "AssertMacros",
[out]       "CairoTest",
[out]       "Starknet"
[out]     ]
[out]   }
[out] }
[out] ```
[out] 
[out] ==============================
[out] file:///mnt/maat-workbench/contracts/verifier/src/honk_verifier_circuits.cairo (1)
[out]   (W) Unused import: `verifier::honk_verifier_circuits::IntoCircuitInputValue` [Ln 4, Col 50]
[out] file:///mnt/maat-workbench/contracts/verifier/src/honk_verifier.cairo (6)
[out]   (W) Unused import: `verifier::honk_verifier::UltraStarknetHonkVerifier::hades_permutation` [Ln 16, Col 24]
[out]   (W) Unused import: `verifier::honk_verifier::UltraStarknetHonkVerifier::ec` [Ln 17, Col 26]
[out]   (W) Unused import: `verifier::honk_verifier::UltraStarknetHonkVerifier::u288` [Ln 21, Col 89]
[out]   (W) Unused import: `verifier::honk_verifier::UltraStarknetHonkVerifier::VK_HASH` [Ln 31, Col 8]
[out]   (W) Plugin diagnostic: unnecessary double parentheses found. Consider removing them. [Ln 187, Col 31]
[out]   (W) Unused variable. Consider ignoring by prefixing with `_`. [Ln 62, Col 29]
[out] total: 0 errors, 7 warnings, 0 infos, 0 hints
[out] 
[out] ==============================
[out] CairoLS process exited with code: 0
