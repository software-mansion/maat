#!/usr/bin/env -S uv run --script
# /// script
# requires-python = ">=3.13"
# dependencies = [
#   "tomlkit>=0.13.2",
# ]
# ///

import subprocess
from functools import cache
from pathlib import Path
from typing import Any, Callable, Literal, cast

import tomlkit

KnownTestRunner = Literal["snforge", "cairo-test", "cargo-test"]

patched_files: list[Path] = []


def patch(
    scarb_toml_path: Path | str, func: Callable[[tomlkit.TOMLDocument, Path], None]
):
    """
    Modifies a TOML file by applying a given transformation to its content and saving it back.
    """
    path = Path(scarb_toml_path)
    patched_files.append(path)
    manifest = tomlkit.parse(path.read_text())
    func(manifest, path.parent)
    path.write_text(tomlkit.dumps(manifest))


def patch_field(table: Any, key: str, value: Any):
    comment = f"NOTE: added by maat-patch, was: {table.get(key, None)!r}"
    table[key] = value
    table[key].comment(comment)


def ensure_in_array(table: Any, key: str, value: Any):
    array = table.setdefault(key, tomlkit.array())
    if value not in array:
        array.append(value)
    table[key].comment(f"NOTE: maat-patch added {value!r}")


def patch_root(manifest: tomlkit.TOMLDocument, project_root: Path):
    patch_member(manifest, project_root)

    if (workspace := manifest.get("workspace")) is not None:
        if "members" in workspace:
            for member in workspace["members"]:
                for member_path in project_root.glob(member):
                    patch(member_path / "Scarb.toml", patch_member)

    # Use [patch.scarbs-xyz] to enforce particular dependency versions to match Ma'at environment.
    patch_table = manifest.setdefault("patch", tomlkit.table())

    if "scarbs-xyz" in patch_table:
        scarbs_patch_table = patch_table["scarbs-xyz"]
    elif '"https://scarbs.xyz/"' in patch_table:
        scarbs_patch_table = patch_table['"https://scarbs.xyz/"']
    else:
        scarbs_patch_table = patch_table.setdefault("scarbs-xyz", tomlkit.table())

    foundry_patch_table = patch_table.setdefault(
        "https://github.com/foundry-rs/starknet-foundry.git", tomlkit.table()
    )

    for dep in ["assert_macros", "starknet", "cairo_test"]:
        patch_field(scarbs_patch_table, dep, scarb_version)

    if should_patch_snforge_std:
        for dep in ["snforge_std", "snforge_scarb_plugin"]:
            for table in [scarbs_patch_table, foundry_patch_table]:
                patch_field(table, dep, foundry_dep_spec)


def patch_member(manifest: tomlkit.TOMLDocument, member_root: Path):
    if (package := manifest.get("package")) is not None:
        # Override "cairo-version" just in case project specifies version requirement that
        # is not satisfactory by Ma'at environment.
        patch_field(package, "cairo-version", scarb_version)

        test_runner = detect_test_runner(member_root)

        if should_patch_snforge_std:
            if test_runner == "snforge":
                add_dev_dependency_if_missing(manifest, "snforge_std", foundry_dep_spec)
            if test_runner == "cairo-test":
                add_dev_dependency_if_missing(manifest, "cairo_test", scarb_version)

        # Try to borrow [dev-dependencies] from Scarb.orig.toml.
        scarb_orig_toml_path = member_root / "Scarb.orig.toml"
        if scarb_orig_toml_path.exists():
            scarb_orig_toml = tomlkit.parse(scarb_orig_toml_path.read_text())
            if orig_dev_dependencies := scarb_orig_toml.get("dev-dependencies"):
                for dev_dependency, version_spec in orig_dev_dependencies.items():
                    # If spec is a str, or `{ version = str, ... }` without a `registry` key,
                    # we can safely copy it from orig toml and pull the dependency from scarbs.xyz.
                    # Otherwise, we're doomed, and we can only assume `*` and cross fingers.
                    if isinstance(version_spec, str):
                        version = version_spec
                    elif "version" in version_spec and "registry" not in version_spec:
                        version = version_spec["version"]
                    else:
                        version = "*"
                    add_dev_dependency_if_missing(manifest, dev_dependency, version)

        # Detect the test runner to use for this package and set the "test" script to run it.
        # We don't try to override test command if the package already sets one
        # or just sets it to something trivial.
        script_table = manifest.setdefault("scripts", tomlkit.table())
        if "test" not in script_table or script_table["test"] in [
            "snforge test",
            "scarb cairo-test",
            "cargo test",
        ]:
            patch_field(script_table, "test", test_runner_command(test_runner))

        # Make sure snforge_std is in the "allow-prebuilt-plugins" array.
        # NOTE: setdefaults seems buggy when used recursively, so we have to do it manually.
        if "tool" not in manifest:
            manifest["tool"] = tomlkit.table()
        if "scarb" not in manifest["tool"]:
            manifest["tool"]["scarb"] = tomlkit.table()
        ensure_in_array(
            manifest["tool"]["scarb"],
            "allow-prebuilt-plugins",
            "snforge_std",
        )


def add_dev_dependency_if_missing(
    manifest: tomlkit.TOMLDocument,
    dependency: str,
    spec: Any,
):
    dev_dependencies = manifest.setdefault("dev-dependencies", tomlkit.table())
    dependencies = manifest.setdefault("dependencies", tomlkit.table())
    if dependency not in dev_dependencies and dependency not in dependencies:
        patch_field(dev_dependencies, dependency, spec)


@cache
def detect_test_runner(root: Path) -> KnownTestRunner:
    return cast(
        KnownTestRunner,
        subprocess.run(
            ["maat-detect-test-framework"],
            stdout=subprocess.PIPE,
            cwd=root,
            text=True,
            check=True,
        ).stdout.strip(),
    )


def test_runner_command(test_runner: KnownTestRunner) -> str:
    match test_runner:
        case "snforge":
            return "snforge test --fuzzer-seed 1"
        case "cairo-test":
            return "scarb cairo-test"
        case "cargo-test":
            return "cargo test"
        case _:
            raise NotImplementedError


def get_tool_version(tool: str) -> str:
    # We can't rely on ASDF_{TOOL}_VERSION environment variables because they may be aliases.
    return subprocess.check_output([tool, "-V"]).decode("utf-8").split()[1]


def ensure_clean_git_repo():
    if Path(".git").exists():
        subprocess.check_output(["rm", "-rf", ".git"])
    subprocess.check_output(["git", "init"])
    subprocess.check_output(["git", "add", "."])
    subprocess.check_output(["git", "commit", "-m", "maat initial state"])


def diff_and_commit_patched_files():
    if patched_files:
        subprocess.check_output(["git", "add"] + [str(p) for p in patched_files])
        subprocess.run(["git", "diff", "--staged"], check=True)
        subprocess.check_output(["git", "commit", "-m", "maat patch"])
    else:
        print("no patches applied")


if __name__ == "__main__":
    scarb_version = get_tool_version("scarb")
    foundry_version = get_tool_version("snforge")

    is_snforge_std = '[package]\nname = "snforge_std' in Path("Scarb.toml").read_text()

    should_patch_snforge_std = not is_snforge_std

    if "nightly" in foundry_version:
        foundry_dep_spec = (
            tomlkit.inline_table()
            .append("version", foundry_version)
            .append("registry", "https://scarbs.dev/")
        )
    else:
        foundry_dep_spec = foundry_version

    ensure_clean_git_repo()
    patch("Scarb.toml", patch_root)
    diff_and_commit_patched_files()
